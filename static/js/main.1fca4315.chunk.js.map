{"version":3,"sources":["Solutions.jsx","App.js","serviceWorker.js","index.js"],"names":["Solutions","useState","solutions","setSolutions","pieces","setPieces","solutionIndex","setSolutionIndex","useEffect","a","async","Axios","get","responsePieces","data","getPieces","response","newSolutions","toString","trim","split","map","l","getSolutions","solution","Piece","index","piece","className","string","regex","type","min","max","length","value","onChange","e","target","key","String","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUA+EeA,MAxEf,WAAsB,IAAD,EACeC,mBAAS,MADxB,mBACZC,EADY,KACDC,EADC,OAESF,mBAAS,MAFlB,mBAEZG,EAFY,KAEJC,EAFI,OAGuBJ,mBAAS,GAHhC,mBAGZK,EAHY,KAGGC,EAHH,KAKnBC,qBAAU,YACR,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAC+BE,IAAMC,IAVvB,4CASd,OACQC,EADR,OAEQT,EAASS,EAAeC,KAC9BT,EAAUD,GAHZ,qCAgBAW,GAVA,qBAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACyBE,IAAMC,IAfd,wCAcjB,OACQI,EADR,OAEQC,EAAeD,EAASF,KAC3BI,WACAC,OACAC,MAAM,MACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,SACpBjB,EAAac,GAPf,qCAWAM,KACC,IAEH,IAmBuBC,EAnBjBC,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EAAQvB,EAAOsB,GAErB,OAAa,MAATC,EACK,uCAAaD,GAIpB,yBAAKE,UAAU,SACb,yBAAKA,UAAU,eAAeD,EAAME,QACpC,yBAAKD,UAAU,cAAcD,EAAMG,SAKzC,OAAiB,MAAb5B,GAA+B,MAAVE,EAChB,2CAYP,6BACE,yBAAKwB,UAAU,kBACb,2BACEG,KAAK,QACLC,IAAI,IACJC,IAAK/B,EAAUgC,OAAS,EACxBN,UAAU,SACVO,MAAO7B,EACP8B,SAAU,SAAAC,GAAC,OAAI9B,EAAiB8B,EAAEC,OAAOH,WAG7C,8CAAiB7B,GAEjB,yBAAKsB,UAAU,aArBD,OADKJ,EAsBwBtB,EAAUI,IApB9C,uCAGFkB,EAASH,KAAI,SAAAK,GAAK,OAAI,kBAACD,EAAD,CAAOc,IAAKb,EAAOA,MAAOc,OAAOd,WC7CnDe,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1fca4315.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\nimport './Solutions.css';\r\n\r\nconst piecesUrl = 'http://localhost:3000/DominoSteine.json';\r\nconst solutionsUrl = 'http://localhost:3000/Solutions.txt';\r\n\r\nfunction Solutions() {\r\n  const [solutions, setSolutions] = useState(null);\r\n  const [pieces, setPieces] = useState(null);\r\n  const [solutionIndex, setSolutionIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function getPieces() {\r\n      const responsePieces = await Axios.get(piecesUrl);\r\n      const pieces = responsePieces.data;\r\n      setPieces(pieces);\r\n    }\r\n\r\n    async function getSolutions() {\r\n      const response = await Axios.get(solutionsUrl);\r\n      const newSolutions = response.data\r\n        .toString()\r\n        .trim()\r\n        .split('\\n')\r\n        .map(l => l.split(', '));\r\n      setSolutions(newSolutions);\r\n    }\r\n\r\n    getPieces();\r\n    getSolutions();\r\n  }, []);\r\n\r\n  const Piece = ({ index }) => {\r\n    const piece = pieces[index];\r\n\r\n    if (piece == null) {\r\n      return <div>Fehler {index}</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"Piece\">\r\n        <div className=\"PieceString\">{piece.string}</div>\r\n        <div className=\"PieceRegex\">{piece.regex}</div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (solutions == null || pieces == null) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const renderSolution = solution => {\r\n    if (solution == null) {\r\n      return <div>Fehler</div>;\r\n    }\r\n\r\n    return solution.map(index => <Piece key={index} index={String(index)} />);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"slidecontainer\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={solutions.length - 1}\r\n          className=\"slider\"\r\n          value={solutionIndex}\r\n          onChange={e => setSolutionIndex(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>LÃ¶sung Nr. {solutionIndex}</div>\r\n\r\n      <div className=\"Solutions\">{renderSolution(solutions[solutionIndex])}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Solutions;\r\n","import React from 'react';\nimport './App.css';\nimport Solutions from \"./Solutions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Solutions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}