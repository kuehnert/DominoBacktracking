{"version":3,"sources":["Solutions.jsx","App.js","serviceWorker.js","index.js"],"names":["Solutions","useState","solutions","setSolutions","pieces","setPieces","solutionIndex","setSolutionIndex","useEffect","a","Axios","url","baseURL","process","responsePieces","data","response","newSolutions","toString","trim","split","map","l","getPieces","getSolutions","solution","Piece","index","piece","className","string","regex","type","min","max","length","value","onChange","e","target","String","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAkFeA,MA9Ef,WACE,MAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0CJ,mBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAC+BC,IAAM,CACjCC,IAAK,oBACLC,QAASC,kDAHb,OACQC,EADR,OAKQV,EAASU,EAAeC,KAC9BV,EAAUD,GANZ,2CADc,oEAUd,8BAAAK,EAAA,sEACyBC,IAAM,CAC3BC,IAAK,gBACLC,QAASC,kDAHb,OACQG,EADR,OAKQC,EAAeD,EAASD,KAC3BG,WACAC,OACAC,MAAM,MACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,SACpBjB,EAAac,GAVf,4CAVc,uBAAC,WAAD,wBAuBdM,GAvBc,mCAwBdC,KACC,IAEH,IAmBuBC,EAnBjBC,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EAAQxB,EAAOuB,GAErB,OAAa,MAATC,EACK,0CAAaD,KAIpB,sBAAKE,UAAU,QAAf,UACE,qBAAKA,UAAU,cAAf,SAA8BD,EAAME,SACpC,qBAAKD,UAAU,aAAf,SAA6BD,EAAMG,YAKzC,OAAiB,MAAb7B,GAA+B,MAAVE,EAChB,6CAYP,gCACE,qBAAKyB,UAAU,iBAAf,SACE,uBACEG,KAAK,QACLC,IAAI,IACJC,IAAKhC,EAAUiC,OAAS,EACxBN,UAAU,SACVO,MAAO9B,EACP+B,SAAU,SAAAC,GAAC,OAAI/B,EAAiB+B,EAAEC,OAAOH,YAG7C,iDAAiB9B,KAEjB,qBAAKuB,UAAU,YAAf,UAtBmBJ,EAsBwBvB,EAAUI,GArBvC,MAAZmB,EACK,yCAGFA,EAASJ,KAAI,SAAAM,GAAK,OAAI,cAACD,EAAD,CAAmBC,MAAOa,OAAOb,IAArBA,aC/C9Bc,MATf,WACE,OACE,sBAAKZ,UAAU,MAAf,UACE,iEACA,cAAC,EAAD,QCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08b0bf3f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport './Solutions.css';\n\nfunction Solutions() {\n  const [solutions, setSolutions] = useState(null);\n  const [pieces, setPieces] = useState(null);\n  const [solutionIndex, setSolutionIndex] = useState(0);\n\n  useEffect(() => {\n    async function getPieces() {\n      const responsePieces = await Axios({\n        url: 'DominoSteine.json',\n        baseURL: process.env.REACT_APP_BASE_URL,\n      });\n      const pieces = responsePieces.data;\n      setPieces(pieces);\n    }\n\n    async function getSolutions() {\n      const response = await Axios({\n        url: 'Solutions.txt',\n        baseURL: process.env.REACT_APP_BASE_URL,\n      });\n      const newSolutions = response.data\n        .toString()\n        .trim()\n        .split('\\n')\n        .map(l => l.split(', '));\n      setSolutions(newSolutions);\n    }\n\n    getPieces();\n    getSolutions();\n  }, []);\n\n  const Piece = ({ index }) => {\n    const piece = pieces[index];\n\n    if (piece == null) {\n      return <div>Fehler {index}</div>;\n    }\n\n    return (\n      <div className='Piece'>\n        <div className='PieceString'>{piece.string}</div>\n        <div className='PieceRegex'>{piece.regex}</div>\n      </div>\n    );\n  };\n\n  if (solutions == null || pieces == null) {\n    return <div>Loading...</div>;\n  }\n\n  const renderSolution = solution => {\n    if (solution == null) {\n      return <div>Fehler</div>;\n    }\n\n    return solution.map(index => <Piece key={index} index={String(index)} />);\n  };\n\n  return (\n    <div>\n      <div className='slidecontainer'>\n        <input\n          type='range'\n          min='0'\n          max={solutions.length - 1}\n          className='slider'\n          value={solutionIndex}\n          onChange={e => setSolutionIndex(e.target.value)}\n        />\n      </div>\n      <div>Lösung Nr. {solutionIndex}</div>\n\n      <div className='Solutions'>{renderSolution(solutions[solutionIndex])}</div>\n    </div>\n  );\n}\n\nexport default Solutions;\n","import React from 'react';\nimport './App.css';\nimport Solutions from \"./Solutions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Reguläre Ausdrücke-Domino</h1>\n      <Solutions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}